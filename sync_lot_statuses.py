import json
import logging
from sync_lot_utils.checkbox_manipulator import deactivate_lot, activate_lot, is_lot_active

MERGED_FILE = "merged.json"
STATUS_FILE = "status.json"
LOG_FILE = "sync_lot_statuses.log"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("sync_lot")
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(message)s")

file_handler = logging.FileHandler(LOG_FILE, encoding="utf-8")
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)


def load_json(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}")
        return {}


def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def sync_statuses():
    logger.info("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ—Ç–æ–≤")
    merged_data = load_json(MERGED_FILE)
    status_data = load_json(STATUS_FILE)
    updated = False

    for game, products in merged_data.items():
        if not products or not isinstance(products, dict):
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫ {game}: –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            continue

        for product_name, lots in products.items():
            if not lots or not isinstance(lots, list):
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫ {game}/{product_name}: –Ω–µ—Ç –ª–æ—Ç–æ–≤.")
                continue

            # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ statuses.json
            product_status = status_data.get(game, {}).get(product_name)
            if product_status is None:
                logger.warning(f"‚ö† –ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {game}/{product_name} –≤ {STATUS_FILE}, –ø—Ä–æ–ø—É—Å–∫.")
                continue

            # –ï—Å–ª–∏ Undetected ‚Üí –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã, –∏–Ω–∞—á–µ –≤—ã–∫–ª—é—á–µ–Ω—ã
            should_be_active = (product_status == "Undetected")

            for lot in lots:
                lot_name = lot.get("name")
                lot_url = lot.get("url")

                if not lot_name or not lot_url:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞ –≤ {game}/{product_name}.")
                    continue

                actual_active = is_lot_active(lot_url)
                if actual_active is None:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞: {lot_name}")
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å —Ç–µ–º, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                if actual_active != should_be_active:
                    if should_be_active:
                        activate_lot(lot_url)
                        lot["active"] = True
                        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–æ—Ç: {lot_name} (—Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {product_status})")
                    else:
                        deactivate_lot(lot_url)
                        lot["active"] = False
                        logger.info(f"‚õî –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–æ—Ç: {lot_name} (—Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {product_status})")
                    updated = True
                else:
                    # –ï—Å–ª–∏ –≤ merged.json –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–µ —Ç–æ ‚Üí –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                    if lot.get("active") != actual_active:
                        lot["active"] = actual_active
                        updated = True
                        logger.info(f"üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–ª–∞–≥ active –≤ merged.json –¥–ª—è: {lot_name}")

    if updated:
        save_json(MERGED_FILE, merged_data)
        logger.info("‚úÖ –§–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    logger.info("üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    try:
        sync_statuses()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ: {e}")
